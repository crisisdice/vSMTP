/*
 * vSMTP mail transfer agent
 * Copyright (C) 2022 viridIT SAS
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see https://www.gnu.org/licenses/.
 *
*/
#{
    authenticate: [
        action "auth getters" || {
            const credentials = auth::credentials();

            log("debug", `auth type => ${credentials.type}`);
            log("debug", `auth token => ${credentials.anonymous_token}`);
        },

        rule "trailing authenticate" || state::accept(),
    ],

    rcpt: [
        action "rcpt getter" || {
            log("debug", `rcpt => ${ctx::rcpt()}`);
        },

        rule "trailing rcpt" || state::accept(),
    ],

    preq: [
        rule "getters" || {
            log("debug", `client: ${ctx::client_ip()}:${ctx::client_port()} => ${ctx::client_address()}`);

            if `${ctx::client_ip()}:${ctx::client_port()}` != ctx::client_address() {
                return state::deny();
            }

            log("debug", `server: ${ctx::server_ip()}:${ctx::server_port()} => ${ctx::server_address()}`);

            if `${ctx::server_ip()}:${ctx::server_port()}` != ctx::server_address() {
                return state::deny();
            }

            log("debug", `connection timestamp => ${ctx::connection_timestamp()}`);
            log("debug", `server name => ${ctx::server_name()}`);
            log("debug", `is secured => ${ctx::is_secured()}`);
            log("debug", `is authenticated => ${auth::is_authenticated()}`);

            log("debug", `helo => ${ctx::helo()}`);
            log("debug", `mail_from => ${ctx::mail_from()}`);
            log("debug", `rcpt list => ${ctx::rcpt_list()}`);
            log("debug", `mail timestamp => ${ctx::mail_timestamp()}`);
            log("debug", `message id => ${ctx::message_id()}`);

            state::next()
        },

        rule "rewrite envelop" || {
            const john = address("john.doe@example.com");
            envelop::rw_mail_from("john.doe@example.com");
            envelop::rw_mail_from(john);

            const fail = ip4("127.0.0.1");
            try { envelop::rw_mail_from(fail); return state::deny(); } catch (e) { log("debug", `${e}`) }

            const add1 = address("add1@example.com");
            const add2 = "add2@example.com";
            const add3 = identifier("add3@example.com");
            envelop::add_rcpt(add1);
            envelop::add_rcpt(add2);
            envelop::add_rcpt(add3);
            envelop::add_rcpt("add4@example.com");

            const fail = ip4("127.0.0.1");
            try { envelop::add_rcpt(fail); return state::deny(); } catch (e) { log("debug", `${e}`) }

            log("debug", `rcpt => ${ctx::rcpt_list()}`);

            const replace1 = address("replace1@example.com");
            const replace4 = address("replace4@example.com");
            envelop::rw_rcpt(add1, replace1);
            envelop::rw_rcpt(replace1, "replace2@example.com");
            envelop::rw_rcpt("replace2@example.com", "replace3@example.com");
            envelop::rw_rcpt("replace3@example.com", replace4);

            const fail = fqdn("example.com");
            try { envelop::rw_rcpt(fail); return state::deny(); } catch (e) { log("debug", `${e}`) }

            envelop::rm_rcpt("add2@example.com");
            envelop::rm_rcpt(add3);

            try { envelop::rm_rcpt(fail); return state::deny(); } catch (e) { log("debug", `${e}`) }

            log("debug", `rcpt => ${ctx::rcpt_list()}`);

            state::next()
        },

        rule "trailing preq" || state::accept(),
    ]
}
